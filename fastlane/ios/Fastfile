# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

opt_out_usage              # don't send usage report

ensure_env_vars(
  env_vars: ['APP_IDENTIFIER', 'ASC_KEY_ID', 'ASC_ISSUER_ID', 'ASC_PRIVATE_KEY', 'ASC_TARGET_NAME', 'ASC_TEAM_ID', 'KEYCHAIN_PATH', 'APP_BUILD_PROFILE', 'GSP_PATH']
)

default_platform(:ios)

setup_ci()

platform :ios do
  before_all do
    ENV["FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT"] = "120"
  end

 desc "Load ASC API Key information to use in subsequent lanes"
 lane :load_asc_api_key do
   app_store_connect_api_key(
     key_id: ENV["ASC_KEY_ID"],
     issuer_id: ENV["ASC_ISSUER_ID"],
     key_content: ENV["ASC_PRIVATE_KEY"],
     is_key_content_base64: true,
     in_house: false # detecting this via ASC private key not currently supported
   )
 end

 desc "Check certs and profiles"
 lane :prepare_signing do |options|
  app_id = ENV["APP_IDENTIFIER"]
  api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]

  profile_name = ENV["ASC_TARGET_NAME"] + " App Store" # replace with the name of your existing profile, or define a name for the profile that fastlane will create if it’s not found

  cert(
      api_key: api_key,
      keychain_path: ENV["KEYCHAIN_PATH"] # the path to the keychain where your certificates are stored
    )

  # main app profile
  sigh(
    api_key: api_key,
    app_identifier: app_id,
    provisioning_name: profile_name,
    force: true # always recreate this exact profile to ensure it's valid and not expired
  )
 end

 desc "Bump build number based on most recent TestFlight build number"
 lane :fetch_and_increment_build_number do
  #fetch read your app identifier defined in your Appfile
  app_identifier = ENV["APP_IDENTIFIER"]
  api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]

  latest_build_number = latest_testflight_build_number(
    api_key: api_key,
    app_identifier: app_identifier
  )

  increment_build_number(
    build_number: (latest_build_number + 1)
  )
 end

 desc "Build the iOS app for release"
 lane :build_release do |options|
  app_identifier = ENV["APP_IDENTIFIER"]
  app_name = ENV["ASC_TARGET_NAME"]
  project = app_name + ".xcodeproj"
  profile_name = lane_context[SharedValues::SIGH_NAME] # the name of the profile to use for the build
  output_name = app_name # specify the name of the .ipa file to generate
  code_sign_identity = "Apple Distribution" # replace with name of code signing identity if different
  export_method = "app-store" # specify the export method
  compile_bitcode = true # specify whether to enable bitcode
  configuration = ENV["APP_BUILD_PROFILE"] # `Staging`` or `Release` configuration is using dev env - `Production` is poiting to prod env.
  # turn off automatic signing during build so correct code signing identity is guaranteed to be used
  update_code_signing_settings(
    use_automatic_signing: false,
    targets: [app_name], # specify which targets to update code signing settings for
    code_sign_identity: code_sign_identity,
    bundle_identifier: app_identifier,
    profile_name: profile_name,
    build_configurations: [configuration] # only toggle code signing settings for Release configurations
  )

  update_project_team(
    path: project,
    teamid: ENV["ASC_TEAM_ID"]
  )

  # restore dependencies
  cocoapods(
    clean_install: true
  )

  # build the app
  gym(
    scheme: app_name, # replace with name of your project’s scheme
    output_name: output_name,
    configuration: configuration,
    export_options: {
      method: export_method,
      provisioningProfiles: {
        app_identifier => profile_name
      },
      compileBitcode: compile_bitcode
    }
  )
 end

 desc "Upload to Testflight"
 lane :upload_testflight do
  api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]
  app_version = lane_context[SharedValues::LATEST_TESTFLIGHT_VERSION]
  build_number = lane_context[SharedValues::BUILD_NUMBER]
  upload_to_testflight(
    api_key: api_key,
    team_id: ENV["ASC_TEAM_ID"],
    app_version: app_version,
    build_number: build_number,
    skip_waiting_for_build_processing: true,
    skip_submission: true
  )
 end

 lane :refresh_dsyms do
  api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]
  app_version = lane_context[SharedValues::LATEST_TESTFLIGHT_VERSION]
  build_number = lane_context[SharedValues::BUILD_NUMBER]
  gsp_path = ENV["GSP_PATH"]

  download_dsyms(
    api_key: api_key,
    team_id: ENV["ASC_TEAM_ID"],
    version: 'latest',
    build_number: build_number,
  )
  upload_symbols_to_crashlytics(
    gsp_path: gsp_path
  )
  # clean_build_artifacts
 end

 desc "Upload to TestFlight / ASC"
 lane :upload_release do
  api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]

  deliver(
      api_key: api_key,
      skip_screenshots: true,
      skip_metadata: true,
      skip_app_version_update: true,
      force: true, # skips verification of HTML preview file (since this will be run from a CI machine)
      run_precheck_before_submit: false # not supported through ASC API yet
  )
 end

 desc "Build"
 lane :build do
  load_asc_api_key
  prepare_signing
  build_release
 end

 desc "Build and upload to TestFlight"
 lane :build_upload_testflight do
  load_asc_api_key
  prepare_signing
  fetch_and_increment_build_number
  build_release
  upload_testflight
  # refresh_dsyms
 end

end
