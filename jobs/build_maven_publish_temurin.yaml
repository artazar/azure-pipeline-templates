parameters:
  - name: gitversionImageVersion
    type: string
  - name: containerRegistry
    type: string
  - name: containerImageName
    type: string
  - name: push
    type: boolean
  - name: projectSubdirectory
    type: string
  - name: releaseBranch
    type: string
  - name: scan
    type: boolean
  - name: test
    type: boolean
  - name: sign
    type: boolean
  - name: cosignImageVersion
    type: string
  - name: cosignKey
    type: string
  - name: cosignKeyPassword
    type: string
  - name: javaVersion
    type: string
  - name: sonarqubeServiceConnection
    type: string

jobs:
  - job: Maven
    displayName: Build Java application
    pool:
      vmImage: ubuntu-latest
    steps:
      - checkout: self
        displayName: Checkout Repo
        fetchDepth: 0
        persistCredentials: true

      - template: ../steps/short_sha.yaml@templates

      - template: ../steps/gitversion.yaml@templates
        parameters:
          gitversionImageVersion: ${{ parameters.gitversionImageVersion }}
          releaseBranch: ${{ parameters.releaseBranch }}

      - task: MavenAuthenticate@0
        inputs:
          mavenServiceConnections: maven-github

      - task: Cache@2
        inputs:
          key: 'maven | "$(Agent.OS)" | **/pom.xml'
          restoreKeys: |
            maven | "$(Agent.OS)"
            maven
          path: $(MAVEN_CACHE_FOLDER)
        displayName: Maven - cache dependencies

      - template: ../steps/maven.yaml@templates
        parameters:
          javaVersion: ${{ parameters.javaVersion }}
          projectSubdirectory: ${{ parameters.projectSubdirectory }}
          sonarqubeServiceConnection: ${{ parameters.sonarqubeServiceConnection }}

      - task: Bash@3
        displayName: Create Dockerfile
        inputs:
          workingDirectory: ${{ parameters.projectSubdirectory }}
          targetType: 'inline'
          script: |
            cat > Dockerfile <<'EOF'
            FROM eclipse-temurin:11-jre-jammy as builder
            WORKDIR app
            COPY target/*.jar app.jar
            RUN java -Djarmode=layertools -jar app.jar extract

            FROM eclipse-temurin:11-jre-jammy

            ARG PORT
            ENV PORT ${PORT:-8080}

            WORKDIR app

            RUN addgroup --gid 1000 www-group && adduser --system --disabled-password --gecos "" --gid 1000 --uid 1000 www-user

            EXPOSE ${PORT}

            COPY --chown=1000:root --from=builder app/dependencies/ ./
            COPY --chown=1000:root --from=builder app/spring-boot-loader/ ./
            COPY --chown=1000:root --from=builder app/snapshot-dependencies/ ./
            COPY --chown=1000:root --from=builder app/application/ ./

            USER 1000

            ENTRYPOINT ["java", \
            "-Dcom.sun.management.jmxremote=true", \
            "-Dcom.sun.management.jmxremote.port=9010", \
            "-Dcom.sun.management.jmxremote.local.only=false", \
            "-Dcom.sun.management.jmxremote.authenticate=false", \
            "-Dcom.sun.management.jmxremote.ssl=false", \
            "-Dcom.sun.management.jmxremote.rmi.port=9010", \
            "-Djava.rmi.server.hostname=localhost", \
            "org.springframework.boot.loader.JarLauncher"]

            EOF
            cat Dockerfile

      - template: ../steps/docker.yaml@templates
        parameters:
          containerRegistry: ${{ parameters.containerRegistry }}
          containerImageName: ${{ parameters.containerImageName }}
          ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
            containerTags:
          ${{ else }}:
            containerTags: $(IMAGETAG)
          push: ${{ parameters.push }}
          projectSubdirectory: ${{ parameters.projectSubdirectory }}
          scan: ${{ parameters.scan }}
          test: ${{ parameters.test }}
          sign: ${{ parameters.sign }}
          cosignImageVersion: ${{ parameters.cosignImageVersion }}
          cosignKey: ${{ parameters.cosignKey }}
          cosignKeyPassword: ${{ parameters.cosignKeyPassword }}
