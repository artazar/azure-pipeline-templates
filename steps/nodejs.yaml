parameters:
  - name: projectSubdirectory
    type: string
    displayName: "The subdirectory relative to repository root where project is located"
  - name: envFilePath
    type: string
    displayName: "Path to env file with a list of variables"
  - name: nginxImage
    type: string
    displayName: "Nginx base image to use"
  - name: nodeVersion
    type: string
    displayName: "Version of node.js to run builds on"
  - name: nodePackageManager
    type: string
    displayName: "Indicate which package manager to use: npm or yarn"

steps:
  - task: Bash@3
    displayName: Create entrypoint
    inputs:
      targetType: 'inline'
      workingDirectory: ${{ parameters.projectSubdirectory }}
      script: |
        rm -f .env && touch .env
        echo '#!/usr/bin/env sh' > entrypoint.sh
        # Treat PUBLIC_URL individually
        echo "PUBLIC_URL='%PUBLIC_URL%'" >> .env
        echo "sed -i \"s~%PUBLIC_URL%~\$PUBLIC_URL~g\" /usr/share/nginx/html/index.html" >> entrypoint.sh
        # Treat all other env vars defined in .env file
        for var in $(awk -F= '{print$1}' ${ENV_FILE_PATH})
        do
          echo "${var}='%${var}%'" >> .env
          echo "find /usr/share/nginx/html -name '*.js' -exec sed -i \"s~%${var}%~\$${var}~g\" {} \;" >> entrypoint.sh
        done
        echo ".env file content:"
        cat .env
        echo "entrypoint file content:"
        cat entrypoint.sh
    env:
      ENV_FILE_PATH: ${{ parameters.envFilePath }}

  - task: Bash@3
    displayName: Create nginx.conf
    inputs:
      targetType: 'inline'
      workingDirectory: ${{ parameters.projectSubdirectory }}
      script: |
        cat > nginx.conf <<'EOF'
        server {
          listen 8080;
          gzip on;
          gzip_http_version  1.0;
          gzip_comp_level    5; # 1-9
          gzip_buffers       16 8k;
          gzip_min_length    256;
          gzip_proxied       any;
          gzip_vary          on;
          # MIME-types
          gzip_types text/plain application/javascript text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/vnd.ms-fontobject application/x-font-ttf font/opentype;

          location / {
            root /usr/share/nginx/html;
            index index.html index.htm;
            try_files $uri $uri/ /index.html =404;
          }
        }
        EOF

  - task: Bash@3
    displayName: Create Dockerfile
    inputs:
      workingDirectory: ${{ parameters.projectSubdirectory }}
      targetType: 'inline'
      script: |
        cat > Dockerfile <<EOF
        FROM ${NGINX_IMAGE}
        EOF
        cat >> Dockerfile <<'EOF'
        RUN addgroup -g 1000 www-group && adduser -S -D -g "" -G www-group -u 1000 www-user && \
            chown -hR 1000:1000 /usr/share/nginx/html /var/cache/nginx /etc/nginx && \
            touch /var/run/nginx.pid && chown 1000:1000 /var/run/nginx.pid
        COPY --chown=1000:root build /usr/share/nginx/html
        COPY nginx.conf /etc/nginx/conf.d/default.conf
        COPY entrypoint.sh /docker-entrypoint.d/
        RUN chmod +x /docker-entrypoint.d/entrypoint.sh
        USER 1000
        EOF
    env:
      NGINX_IMAGE: ${{ parameters.nginxImage }}

  - task: NodeTool@0
    displayName: Set up Node.JS
    inputs:
      versionSpec: '${{ parameters.nodeVersion }}'

  - ${{ if eq(parameters.nodePackageManager, 'npm') }}:
    - task: Bash@3
      displayName: Restore dependencies and Build the application
      inputs:
        workingDirectory: ${{ parameters.projectSubdirectory }}
        targetType: 'inline'
        script: |
          npm install
          npm install --save history
          npm ci
          npm run build

  - ${{ if eq(parameters.nodePackageManager, 'yarn') }}:
    - task: Bash@3
      displayName: Restore dependencies and Build the application
      inputs:
        workingDirectory: ${{ parameters.projectSubdirectory }}
        targetType: 'inline'
        script: |
          yarn install --immutable --immutable-cache --check-cache
          yarn build

  - task: Bash@3
    displayName: Check the built files
    inputs:
      workingDirectory: ${{ parameters.projectSubdirectory }}
      targetType: 'inline'
      script: |
        find build/
